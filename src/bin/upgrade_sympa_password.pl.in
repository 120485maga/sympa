#! --PERL--
# -*- indent-tabs-mode: nil; -*-
# vim:ft=perl:et:sw=4
# $Id$

# Sympa - SYsteme de Multi-Postage Automatique
#
# Copyright (c) 1997, 1998, 1999 Institut Pasteur & Christophe Wolfhugel
# Copyright (c) 1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005,
# 2006, 2007, 2008, 2009, 2010, 2011 Comite Reseau des Universites
# Copyright (c) 2011, 2012, 2013, 2014, 2015, 2016, 2017 GIP RENATER
# Copyright 2017 The Sympa Community. See the AUTHORS.md file at the top-level
# directory of this distribution and at
# <https://github.com/sympa-community/sympa.git>.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

use lib split(/:/, $ENV{SYMPALIB} || ''), '--modulesdir--';
use strict;
use warnings;

use Conf;
use Sympa::DatabaseManager;
use Sympa::Tools::Password;
use Sympa::User;

die "Crypt::CipherSaber not installed ; cannot crypt passwords"
    unless $Crypt::CipherSaber::VERSION;
die 'Error in configuration'
    unless Conf::load(Conf::get_sympa_conf(), 'no_db');
my $sdm = Sympa::DatabaseManager->instance
    or die 'Can\'t connect to database';

my $password_hash = Conf::get_robot_conf('*', 'password_hash');

print "Recoding password using $password_hash fingerprint.\n";

my $sth = $sdm->do_query(q{SELECT email_user, password_user from user_table});
unless ($sth) {
    die 'Unable to prepare SQL statement';
}

my $total     = 0;
my $total_md5 = 0;
my $total_bcrypt = 0;

while (my $user = $sth->fetchrow_hashref('NAME_lc')) {
    my $clear_password;

    # Ignore empty passwords
    next
        unless defined $user->{'password_user'}
        and length $user->{'password_user'};

    if ($user->{'password_user'} =~ /^[0-9a-f]{32}/) {
        printf "Password from %s already encoded as md5 fingerprint\n",
            $user->{'email_user'};
        $total_md5++;
        next;
    }

    if ($user->{'password_user'} =~ /^\$2a\$/) {
        printf "Password from %s already encoded as bcrypt fingerprint\n",
            $user->{'email_user'};
        $total_bcrypt++;
        next;
    }

    if ($user->{'password_user'} =~ /^crypt.(.*)$/) {
        $clear_password = Sympa::Tools::Password::decrypt_password(
            $user->{'password_user'});
    } else {    ## Old style cleartext passwords
        $clear_password = $user->{'password_user'};
    }

    $total++;

    ## Updating Db
    unless (
        $sdm->do_prepared_query(
            q{UPDATE user_table
              SET password_user = ?
              WHERE email_user = ?},
            Sympa::User::password_fingerprint($clear_password, undef),
            $user->{'email_user'}
        )
        ) {
        die 'Unable to execute SQL statement';
    }
}
$sth->finish();

printf
    "Updating password storage in table user_table using $password_hash hashes for %d users.\n",
    $total;
if ($total_md5 || $total_bcrypt) {
    printf
        "Found in table user %d password stored using md5, %d using bcrypt. Did you run Sympa before upgrading ?\n",
        $total_md5, $total_bcrypt;
}

printf "Total passwords re-encoded using $password_hash: %d\n", $total;

exit 0;

__END__

=encoding utf-8

=head1 NAME

upgrade_sympa_password, upgrade_sympa_password.pl -
Upgrading password in database

=head1 DESCRIPTION

Versions later than 5.4 uses MD5 hash instead of
symmetric encryption to store password.

Versions later than 6.2.26 support bcrypt.

This upgrade requires to rewriting user password entries in the database.
This upgrade IS NOT REVERSIBLE.

=head1 HISTORY

As of Sympa 3.1b.7, passwords may be stored into user table with encrypted
form by reversible RC4.

Sympa 5.4 or later uses MD5 one-way hash function to encode user passwords.

Sympa 6.2.26 or later has optional support for bcrypt.

=cut
